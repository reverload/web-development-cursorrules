---
description: Rules for Next.js App Router files in the app/ directory (pages, layouts, routes) to enforce best practices in routing, data fetching, and component usage.
globs: app/**/*
---
The `app/` directory contains Next.js 15 App Router pages, layouts, and route handlers. Follow these rules for all files in `app/` to ensure a consistent and optimized application structure:

- **Use Server Components by Default:** Write components in `app/` (pages and layouts) as **React Server Components (RSC)** unless they need client-side interactivity. By default, omit the `"use client"` directive so that components run on the server – this reduces bundle size and improves performance. Only convert to a Client Component if you need browser-only APIs or state (see next point).
- **Minimal `"use client"` Usage:** When client-side interactivity is required (for example, a form with client-side validation or a dynamic widget), isolate that logic in a small client component. Mark only those files with `"use client"` at the top and keep them as leaf components if possible. This ensures the majority of the app remains server-rendered. **Do not sprinkle `"use client"` indiscriminately** at higher-level pages or layouts – keep it scoped to where it’s needed.
- **File Convention and Structure:** Adhere to Next.js conventions: use `page.tsx` for route pages, `layout.tsx` for layouts (wrapping UI), and `loading.tsx` for loading states. Place an `error.tsx` in a route segment to handle errors in that subtree gracefully. **Group related routes** using nested folders and layout files to share UI or state between pages. Use **route groups** (folder names in parentheses) if needed to organize routes without affecting URL paths. Keep the directory structure tidy; for example, page-specific components can live alongside `page.tsx` in the same folder (or a subfolder) if they are only used by that page.
- **Data Fetching and Caching:** Perform data loading in server components for initial page render. Leverage Next.js **async server components** – you can use `await` within a server component to fetch data (e.g. from databases or external APIs) before rendering. Utilize Next.js caching strategies: mark fetch requests with `cache: 'force-cache'` (default) for static data or `cache: 'no-store'` for always-fresh data, and use `revalidate` if employing ISR (Incremental Static Regeneration) for a route. This ensures data is fetched efficiently and pages can leverage automatic caching where appropriate.
- **Server Actions for Mutations:** Instead of creating separate API routes for form submissions or minor mutations, use **Server Actions** (React Actions) in your components. Define an `async function` (optionally using the `use server` directive if required by the framework) inside a server component or exported from a server module, and attach it to a form’s `action` prop. This allows direct form submissions to run server-side logic. Manage the UI state of these actions with `useActionState` (in React 19) or form pending UI (e.g. disabling a submit button while submission is in progress). Using server actions keeps logic close to the UI and avoids extra client-round-trips.
- **Loading and Error UI:** Provide a good user experience during data load or error conditions. Utilize Next.js **`loading.tsx`** files in route segments to show skeletons or spinners while server components load (especially if using Suspense or streaming). Similarly, implement **`error.tsx`** files to catch errors in a route and display a friendly error message or recovery option (navigation, retry, etc.). Make sure these files are present where lengthy data fetching or higher risk of error exists (e.g. pages that call external APIs).
- **Navigation and Linking:** Use Next.js `<Link>` component for internal navigation to benefit from client-side transitions and prefetching. Ensure links are accessible (use meaningful link text, avoid only icons without aria-label). For critical navigation that should not break, consider wrapping in error boundaries if the destination might throw an error on render.
- **SEO & Metadata:** Define route metadata using Next.js 15 conventions. If using the file-based metadata (e.g. `head.tsx` or static `metadata` export in page files), ensure titles, descriptions, and Open Graph tags are set appropriately for each page. This enhances SEO and social sharing. Keep metadata definitions in the same folder as the page for clarity.
- **Avoid Client-Side Only Routing for Data:** Refrain from using client-side data fetching (like useEffect + fetch) inside `app/` pages for initial data. The App Router is designed for **server-first rendering**. If you need realtime updates or post-initial load fetching, that should be handled in a client component after the page loads (e.g., a component that uses Tanstack Query or WebSockets), but the initial render should come from the server whenever possible.