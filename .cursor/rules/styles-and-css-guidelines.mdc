---
description: "Global and Tailwind CSS styling conventions in styles/, including usage of global styles, Tailwind configuration, and theming."
globs: styles/**/*
---

The `styles/` directory contains global styles, Tailwind config, and possibly CSS modules or other style-related files. Since this project primarily uses Tailwind CSS (and shadcn’s pre-built styles), the emphasis is on configuration and minimal global styling. Guidelines for styles:

- **Tailwind Configuration:** Keep the Tailwind config (`tailwind.config.js` or `.ts`) aligned with the design system. Define color palette, spacing scale, font families, and other theme extensions according to the brand/design tokens provided. Avoid drastically changing Tailwind’s defaults unless required for the design system. Use the config to add custom utilities or variants if absolutely needed (e.g., if using shadcn, ensure the config includes shadcn presets or themes as documented).
- **Global Styles Usage:** Global CSS (e.g. in `globals.css`) should be limited to resets, base styles, and variables. For instance, include something like **Modern CSS reset** (Tailwind includes a preflight by default), and perhaps define CSS variables for theming if needed (shadcn uses CSS variables for theme colors, make sure they are set for light/dark modes). Do not write specific component styles in the global CSS – those belong in Tailwind classes or component-scoped styles.
- **CSS Modules or Scoped CSS:** If you must write custom CSS for a particular component and Tailwind isn’t sufficient, consider using CSS Modules or scoped styles (e.g., a `.module.css` file alongside a component). This keeps styles isolated. However, first evaluate if Tailwind utilities or a slight Tailwind config extension can solve the problem. We want to minimize context switching between JS and CSS.
- **Avoid Inline Styles:** Do not use inline style attributes in JSX except for truly dynamic styles that cannot be handled by Tailwind classes (which is rare, since Tailwind covers most cases). Inline styles are harder to override and don’t get the benefits of autoprefixing or design system values. If dynamic styling is needed (like computing a color), consider using Tailwind’s bracket notation for arbitrary values *with caution* or add a custom CSS variable and toggle it via Tailwind (`style={{ '--my-color': value }}` paired with a Tailwind class that uses that var).
- **Dark Mode and Theming:** Ensure that dark mode or theming support is handled according to the project requirements. If using shadcn UI, it typically provides dark mode styles out of the box (triggered by a `.dark` class or data-theme attribute). Utilize the recommended approach (e.g., adding `class="dark"` on <html> for dark mode) and test that components adapt correctly. In global styles, define any additional styles needed for dark mode (like body background color, etc.). Keep theme toggling logic in a single place (maybe a context or a hook) that adds/removes the appropriate class on the document element.
- **Ordering and Organization:** Keep the content of `styles/` well-organized. Example structure: a `globals.css` for global imports (Tailwind base, components, utilities via `@tailwind` directives, plus any custom base styles), possibly separate files for specific global needs (e.g. `styles/fonts.css` if you’re importing custom font faces, or `styles/shadcn.css` if additional overrides for shadcn components are necessary). Clearly comment sections of the CSS for clarity. Ensure that the CSS import order (in `_app.js` or the root layout) follows Tailwind’s recommendations (base -> components -> utilities).
- **Performance:** Keep an eye on CSS bundle size. Tailwind’s purge (content scanning for class usage) should be configured to remove unused styles in production. Avoid writing styles that aren’t used. If using any animation or keyframes in CSS, define them carefully and avoid large, inefficient animations that could cause jank (use `prefers-reduced-motion` queries to disable animations for users who prefer less motion).
- **Testing Styles:** While styles are not typically “tested” like code, visually verify that global styles do not unintentionally override component styles. For example, if adding a global `h1` style, ensure it doesn’t break the look of headings in components that might have their own styling. Use browser devtools to inspect that Tailwind classes are being applied as expected and that specificity wars are avoided (by not increasing specificity unnecessarily in custom CSS).
